# day 16

## Section

```elixir
defmodule Packet do
  use Bitwise

  def decode!(bin) do
    {res, _} = decode(bin)
    res
  end

  def decode(<<version::3, rest::bits>>) do
    {payload, rest} = decode_type(rest)
    {%{version: version, payload: payload}, rest}
  end

  def decode_type(<<4::3, rest::bits>>) do
    {decoded, rest} = decode_literal(rest, 0)
    {%{type: :literal, value: decoded}, rest}
  end

  def decode_type(<<op::3, rest::bits>>) do
    {decoded, rest} = decode_operator(rest)

    op =
      case op do
        0 -> :sum
        1 -> :product
        2 -> :minimum
        3 -> :maximum
        5 -> :gt
        6 -> :lt
        7 -> :eq
      end

    {%{type: :op, op: op, value: decoded}, rest}
  end

  def decode_literal(<<1::1, value::4, rest::bits>>, acc) do
    decode_literal(rest, (acc <<< 4) + value)
  end

  def decode_literal(<<0::1, value::4, rest::bits>>, acc) do
    {(acc <<< 4) + value, rest}
  end

  def decode_operator(<<0::1, len::15, subpackets::bits-size(len), rest::bits>>) do
    {decode_len(subpackets), rest}
  end

  def decode_operator(<<1::1, count::11, rest::bits>>) do
    decode_count(count, rest)
  end

  defp decode_count(0, rest), do: {[], rest}

  defp decode_count(count, rest) do
    {decoded, rest} = decode(rest)
    {final, rest} = decode_count(count - 1, rest)
    {[decoded | final], rest}
  end

  defp decode_len(<<>>), do: []

  defp decode_len(<<rest::bits>>) do
    {decoded, rest} = decode(rest)
    [decoded | decode_len(rest)]
  end

  def fromHex(s), do: s |> Base.decode16!() |> Packet.decode!()

  def versions(%{version: version, payload: payload}) do
    [version | versions(payload)]
  end

  def versions(%{type: :literal}), do: []

  def versions(%{value: value}) do
    for v <- value, reduce: [] do
      acc -> acc ++ versions(v)
    end
  end

  def evaluate(%{type: :literal, value: value}), do: value

  def evaluate(%{type: :op, op: op, value: values} = operator) do
    IO.inspect(operator)

    args =
      for v <- values, into: [] do
        evaluate(v)
      end

    IO.inspect(args)

    case op do
      :sum ->
        Enum.sum(args)

      :product ->
        Enum.reduce(args, &(&1 * &2))

      :minimum ->
        Enum.min(args)

      :maximum ->
        Enum.max(args)

      :gt ->
        [fst, snd] = args
        if fst > snd, do: 1, else: 0

      :lt ->
        [fst, snd] = args
        if fst < snd, do: 1, else: 0

      :eq ->
        [fst, snd] = args
        if fst == snd, do: 1, else: 0
    end
  end

  def evaluate(%{payload: payload}) do
    evaluate(payload)
  end
end

"38006F45291200" |> Packet.fromHex() |> Packet.evaluate()
"EE00D40C823060" |> Packet.fromHex()
"8A004A801A8002F478" |> Packet.fromHex() |> Packet.evaluate()
```

```elixir
input =


input |> Packet.fromHex() |> Packet.versions() |> IO.inspect() |> Enum.sum()
```

```elixir
input |> Packet.fromHex() |> Packet.evaluate()
```
